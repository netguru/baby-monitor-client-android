apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'com.getkeepsafe.dexcount'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'com.google.firebase.firebase-perf'

ext {
    secrets = [
            firebaseCloudMessagingServerKey: keyProperty("FIREBASE_CLOUD_MESSAGING_SERVER_KEY")
    ]
}

android {
    namespace 'co.netguru.baby.monitor.client'
    compileSdkVersion 33
    buildToolsVersion "29.0.2"
    defaultConfig {
        applicationId "com.netguru.babyguard"
        minSdkVersion 21
        targetSdkVersion 33
        versionCode isBitrise ? Integer.parseInt(bitrise.io.buildNumber) : 1
        versionName '0.5.0'
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
        }
    }

    buildFeatures {
        buildConfig = true
    }
    viewBinding {
        enabled = true
    }

    buildTypes {
        debug {
            versionNameSuffix "-DEBUG"
            applicationIdSuffix ".debug"
            testCoverageEnabled true
            debuggable true
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    'proguard-rules.pro', 'proguard-instant-run.pro', 'proguard-rules-test.pro'
        }
        releasePreprod {
            signingConfig signingConfigs.debug
            versionNameSuffix "-PREPROD"
            applicationIdSuffix ".preprod"
            debuggable true
            minifyEnabled true
            shrinkResources true
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'),
                    'proguard-rules-release-preprod.pro'
        }
        release {
            debuggable false
            minifyEnabled true
            shrinkResources true
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'),
                    'proguard-rules-release.pro'
        }
    }

    sourceSets {
        debug { java.srcDirs += 'src/debugTools/kotlin' }
        releasePreprod { java.srcDirs += 'src/debugTools/kotlin' }
    }

    buildTypes.each { type ->
        type.buildConfigField 'String', 'FIREBASE_CLOUD_MESSAGING_SERVER_KEY', "\"$secrets.firebaseCloudMessagingServerKey\""
    }

    // Always show the result of every unit test, even if it passes.
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }
    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }
    sourceSets.all {
        it.java.srcDir "src/$it.name/kotlin"
    }
    lintOptions {
        abortOnError false
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    viewBinding {
        enabled = true
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = 1.8
    }
}

kapt {
    correctErrorTypes = true
}


configurations {
    dependencyUpdates.resolutionStrategy = {
        componentSelection { rules ->
            rules.all { ComponentSelection selection ->
                boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
                    selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
                }
                if (rejected) {
                    selection.reject('Release candidate')
                }
            }
        }
    }
}

dependencies {

    implementation 'com.google.firebase:firebase-perf:20.3.3'
    implementation 'org.slf4j:slf4j-api:1.7.32'
    implementation 'org.slf4j:slf4j-simple:1.7.32'

    //Kotlin
    implementation libs.kotlin
    implementation libs.constraintLayout

    //Navigation Components
    implementation libs.navigationFragment
    implementation libs.navigationUiKtx

    //Ktx
    implementation ktx.core
    implementation ktx.fragment
    implementation ktx.liveData

    //Anko Commons
    implementation libs.ankoCommons

    //Live Data
    implementation libs.lifecycleExtensions
    kapt proc.lifecycleExtensions

    //Room
    implementation libs.room
    implementation libs.roomRx
    kapt proc.room

    // Support
    implementation libs.appCompat
    implementation libs.design

    // Dagger
    implementation libs.dagger
    implementation libs.daggerAndroid
    implementation libs.daggerAndroidSupport
    kapt proc.dagger
    kapt proc.daggerAndroid
    compileOnly proc.javaxAnnotation

    //RxJava
    implementation libs.rxJava2
    implementation(libs.rxKotlin2) {
        exclude module: 'rxjava'
        exclude module: 'kotlin-stdlib'
    }
    implementation(libs.rxAndroid2) {
        exclude module: 'rxjava'
    }

    // Timber
    implementation libs.timber

    // LeakCanary
    debugImplementation libs.leakCanary

    //Glide
    implementation libs.glide
    kapt proc.glide

    //ThreeTen
    implementation libs.threeTen

    //Gson
    implementation libs.gson

    //EasyImage
    implementation libs.easyImage

    //Tensor Flow
    implementation libs.tensorFlow

    //Java Web Socket
    implementation libs.javaWebSocket

    //WebRtc
    implementation libs.googleWebRtc

    //Firebase Storage
    implementation libs.firebaseStorage

    //Firebase Database
    implementation libs.firebaseDatabase

    implementation libs.firebaseMessaging

    implementation libs.okHttp

    //Firebase Analytics
    implementation platform(libs.firebaseBom)
    implementation libs.firebaseAnalythics
    implementation libs.firebaseCrashlytics

    implementation libs.deviceNames

    //Unit testing
    testImplementation test.junit
    testImplementation test.mockito
    testImplementation test.mockitoKotlin
    testImplementation test.lifecycleExtensions

    //Instrumented tests
    androidTestImplementation test.supportAnnotations
    androidTestImplementation test.runner
    androidTestImplementation test.rules
    androidTestImplementation test.espresso
    androidTestImplementation test.room
    androidTestImplementation test.lifecycleExtensions
}
