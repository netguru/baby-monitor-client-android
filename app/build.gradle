apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.frogermcs.androiddevmetrics'
apply plugin: 'com.getkeepsafe.dexcount'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'org.sonarqube'
apply plugin: 'com.vanniktech.android.junit.jacoco'
apply plugin: 'io.fabric'
apply from: '../buildsystem/sonarqube.gradle'

ext {

    secrets = [
            firebaseCloudMessagingServerKey: keyProperty("FIREBASE_CLOUD_MESSAGING_SERVER_KEY"),
            hockeyAppIdPreProd             : keyProperty("HOCKEY_APP_ID_PREPROD"),
            hockeyAppIdProduction          : keyProperty("HOCKEY_APP_ID_PRODUCTION")
    ]
}

android {
    compileSdkVersion 28
    buildToolsVersion "28.0.3"
    defaultConfig {
        applicationId "com.netguru.babyguard"
        minSdkVersion 19
        targetSdkVersion 28
        versionCode isBitrise ? Integer.parseInt(bitrise.io.buildNumber) : 1
        versionName '0.1.0'
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug {
            versionNameSuffix "-DEBUG"
            applicationIdSuffix ".debug"
            testCoverageEnabled true
            debuggable true
            minifyEnabled true
            shrinkResources false
            useProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    'proguard-rules.pro', 'proguard-instant-run.pro', 'proguard-rules-test.pro'
            manifestPlaceholders = [HOCKEY_APP_ID: keyProperty("HOCKEY_APP_ID_DEBUG")]
        }
        releasePreprod {
            signingConfig signingConfigs.debug
            versionNameSuffix "-PREPROD"
            applicationIdSuffix ".preprod"
            debuggable true
            minifyEnabled true
            shrinkResources true
            zipAlignEnabled true
            useProguard true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'),
                    'proguard-rules-release-preprod.pro'
            manifestPlaceholders = [HOCKEY_APP_ID: secrets.hockeyAppIdPreProd]
        }
        release {
            debuggable false
            minifyEnabled true
            shrinkResources true
            zipAlignEnabled true
            useProguard true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'),
                    'proguard-rules-release.pro'
            manifestPlaceholders = [HOCKEY_APP_ID: secrets.hockeyAppIdProduction]
        }
    }

    buildTypes.each { type ->
        type.buildConfigField 'String', 'FIREBASE_CLOUD_MESSAGING_SERVER_KEY', "\"$secrets.firebaseCloudMessagingServerKey\""
    }

    // Always show the result of every unit test, even if it passes.
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }
    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }
    sourceSets.all {
        it.java.srcDir "src/$it.name/kotlin"
    }
    junitJacoco {
        jacocoVersion = '0.8.1'
        excludes = ['android/databinding/**/*.class',
                    '**/android/databinding/*Binding.class',
                    '**/BR.*',
                    '**/R.class',
                    '**/R$*.class',
                    '**/BuildConfig.*',
                    '**/Manifest*.*',
                    '**/*$ViewInjector*.*',
                    '**/*$ViewBinder*.*',
                    '**/*_MembersInjector.class',
                    '**/Dagger*Component.class',
                    '**/Dagger*Component$Builder.class',
                    '**/*Module_*Factory.class',
                    '**/AutoValue_*.*',
                    '**/*JavascriptBridge.class',
                    '**/Lambda$*.class',
                    '**/Lambda.class',
                    '**/*Lambda.class',
                    '**/*Lambda*.class']
    }
    lintOptions {
        abortOnError false
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = 1.8
    }
}

kapt {
    correctErrorTypes = true
}

androidExtensions {
    experimental = true
}

configurations {
    dependencyUpdates.resolutionStrategy = {
        componentSelection { rules ->
            rules.all { ComponentSelection selection ->
                boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
                    selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
                }
                if (rejected) {
                    selection.reject('Release candidate')
                }
            }
        }
    }
}

dependencies {
    implementation project(':visualizer')

    //Kotlin
    implementation libs.kotlin
    implementation libs.constraintLayout

    //Anko Commons
    implementation libs.ankoCommons

    //Live Data
    implementation libs.lifecycleExtensions
    kapt proc.lifecycleExtensions

    //Room
    implementation libs.room
    implementation libs.roomRx
    kapt proc.room

    // Support
    implementation libs.appCompat
    implementation libs.design

    // Dagger
    implementation libs.dagger
    implementation libs.daggerAndroid
    implementation libs.daggerAndroidSupport
    kapt proc.dagger
    kapt proc.daggerAndroid
    compileOnly proc.javaxAnnotation

    //RxJava
    implementation libs.rxJava2
    implementation(libs.rxKotlin2) {
        exclude module: 'rxjava'
        exclude module: 'kotlin-stdlib'
    }
    implementation(libs.rxAndroid2) {
        exclude module: 'rxjava'
    }

    // Timber
    implementation libs.timber

    // Stetho
    debugImplementation libs.stetho

    // LeakCanary
    debugImplementation libs.leakCanary

    // BlockCanary
    debugImplementation libs.blockCanary

    // StrictMode
    debugImplementation libs.strictmodeNotifier

    // HockeyApp
    implementation libs.hockeyApp

    //MaterialEditText
    implementation libs.materialEditText

    //Glide
    implementation libs.glide
    kapt proc.glide

    //ThreeTen
    implementation libs.threeTen

    //Expandable Layout
    implementation libs.expandableLayout

    //Gson
    implementation libs.gson

    //EasyImage
    implementation libs.easyImage

    //Navigation Components
    implementation libs.navigationFragment
    implementation libs.navigationUiKtx

    //Tensor Flow
    implementation libs.tensorFlow

    //Java Web Socket
    implementation libs.javaWebSocket

    //Material Dialogs
    implementation libs.materialDialogs

    //ExoPlayer
    implementation libs.exoPlayer

    //WebRtc
    implementation libs.googleWebRtc

    //Firebase Storage
    implementation libs.firebaseStorage

    //Firebase Database
    implementation libs.firebaseDatabase

    implementation libs.firebaseMessaging

    implementation libs.okHttp

    //Firebase Analytics
    implementation libs.firebaseAnalytics
    implementation libs.crashlytics

    //TODO delete after AndroidX Migration (added because of fatal lint version conflict)
    implementation libs.mediaCompat
    implementation libs.supportV4

    //Unit testing
    testImplementation test.junit
    testImplementation test.mockito
    testImplementation test.mockitoKotlin

    //Instrumented tests
    androidTestImplementation test.supportAnnotations
    androidTestImplementation test.runner
    androidTestImplementation test.rules
    androidTestImplementation test.espresso
    androidTestImplementation test.room
    androidTestImplementation test.lifecycleExtensions
}
